type Ciudad = String
type Duracion = Float
type Vuelo = (Ciudad, Ciudad, Duracion)
type AgenciaDeViajes = [Vuelo]

-- EJERCICIO 1
vuelosValidos :: AgenciaDeViajes -> Bool
vuelosValidos [] = True
vuelosValidos (v:vs) | not (vueloValido v) = False
                     | pertenece v vs      = False
                     | otherwise           = vuelosValidos vs

vueloValido :: Vuelo -> Bool
vueloValido (c1, c2, t) = (c1 /= c2) && (t > 0.00)

pertenece :: Vuelo -> AgenciaDeViajes -> Bool
pertenece _ [] = False
pertenece (v11, v12, _) ((v21, v22, _):xs) = (v11 == v21 && v12 == v22) || pertenece (v11, v12, _) xs


--EJERCICIO 2 
estaLaCiudad :: Ciudad -> Vuelo -> Bool
estaLaCiudad n (x,y,z) | n == x || n == y = True
                       | otherwise = False

destinoYPartida :: Ciudad -> Vuelo -> Ciudad
destinoYPartida n (x,y,z) | n == x = y
                          | n == y = x 

eliminarRepetidos :: (Eq t) => t -> [t] -> [t]
eliminarRepetidos _ [] = []
eliminarRepetidos n (x:xs) | n == x = eliminarRepetidos n xs
                           | otherwise = x:eliminarRepetidos n xs

-- eliminarRepetidos ("Rosario", "Mendoza", 2.5) [("BsAs", "Rosario", 5.0), ("Rosario", "Mendoza", 2.5)] 
ciudadesConectadas :: AgenciaDeViajes -> Ciudad -> [Ciudad]
ciudadesConectadas [] _ = []
ciudadesConectadas (x:xs) n | estaLaCiudad n x == True = [destinoYPartida n x] ++ ciudadesConectadas (eliminarRepetidos x xs) n
                            | otherwise = ciudadesConectadas xs n 

-- ciudadesConectadas [("BsAs", "Rosario", 5.0), ("Rosario", "Mendoza", 2.5), ("BsAs", "Rosario", 5.0)] "Rosario"

-- EJERCICIO 3
modernizarFlota :: AgenciaDeViajes -> AgenciaDeViajes
modernizarFlota [] = []
modernizarFlota ((origen, destino, duracion):xs) = (origen, destino, duracion * 0.9) : modernizarFlota xs

-- EJERCICIO 4
ciudadMasConectada :: AgenciaDeViajes -> Ciudad
ciudadMasConectada viajes = masRepetida (auxiliar viajes)

-- ciudadMasConectada [("BsAs", "Rosario", 10.0), ("Rosario", "Cordoba", 7.0)]

laMasRepetidaInt :: Ciudad -> [Ciudad] -> Int
laMasRepetidaInt n [] = 0 
laMasRepetidaInt n (m:ms) | n==m = 1 + laMasRepetidaInt n ms
                          | otherwise = laMasRepetidaInt n ms

-- laMasRepetidaInt "Rosario"  [("BsAs", "Rosario", 10.0), ("Rosario", "Cordoba", 7.0)]
auxiliar :: AgenciaDeViajes -> [Ciudad]
auxiliar [] = []
auxiliar ((a,b,c):xs) = a:b:auxiliar xs

-- auxiliar [("BsAs", "Rosario", 10.0), ("Rosario", "Cordoba", 7.0)]

masRepetida :: [Ciudad] -> Ciudad
masRepetida (c:t:cs) | c /= t && (laMasRepetidaInt c (c:t:cs)) > (laMasRepetidaInt t (c:t:cs)) = c
                     | c == t && (laMasRepetidaInt c (c:t:cs)) >= (laMasRepetidaInt t (c:t:cs)) = c
                     | otherwise = masRepetida (eliminarRepetidos c (c:t:cs))

-- masRepetida ["BsAs","Rosario","Rosario","Cordoba"]

-- EJERCICIO 5
sePuedeLlegar :: AgenciaDeViajes -> Ciudad -> Ciudad -> Bool
sePuedeLlegar [] _ _ = False
sePuedeLlegar (x:xs) n m | longitud (eliminarRepetidos m (conexiones n m (x:xs))) == 0 = True
                         | longitud (eliminarRepetidos m (conexiones n m (x:xs))) == 1 = True
                         | otherwise = False

-- sePuedeLlegar [("BsAs", "Rosario", 5.0), ("Rosario", "Cordoba", 5.0),("Cordoba", "BsAs", 8.0)] "BsAs" "Cordoba"
-- sePuedeLlegar [("BsAs", "Cordoba", 5.0)] "BsAs" "Cordoba"
conexiones :: Ciudad -> Ciudad -> AgenciaDeViajes -> [Ciudad]
conexiones  _ _ [] = []
conexiones  n l ((c,t,m):cs) | l /= c && n == c  = [t] ++ conexiones t l cs
                             | otherwise = conexiones n l cs

longitud ::(Eq t) => [t] -> Integer
longitud [] = 0
longitud (x:xs) = 1 + longitud xs

-- conexiones "BsAs" "Cordoba" [("BsAs", "Rosario", 5.0), ("Rosario", "Cordoba", 5.0),("Cordoba", "BsAs", 8.0)]
-- conexiones "BsAs" "Cordoba" [("BsAs", "Cordoba", 5.0)]   



-- EJERCICIO 7
puedoVolverAOrigen :: AgenciaDeViajes -> Ciudad -> Bool
puedoVolverAOrigen agencia origen = buscarRuta agencia origen origen

buscarRuta :: AgenciaDeViajes -> Ciudad -> Ciudad -> Bool
buscarRuta [] _ _ = False
buscarRuta ((v11, v12, _):xs) origen destino | v11 == destino && v12 == origen = True
                                             | v11 == destino = buscarRuta xs origen v12
                                             | v12 == origen = buscarRuta xs origen v11
                                             | otherwise = buscarRuta xs origen destino
